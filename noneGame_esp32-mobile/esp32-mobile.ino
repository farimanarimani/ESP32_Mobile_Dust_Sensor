/*

   ==general==
   This script uses the non-volatile storage of esp32 to store key value pairs. These can be accessed via BLE-connection (read and/or write).

   ==BLE==
   BLE part Based on Neil Kolban example for IDF: https://github.com/nkolban/esp32-snippets/blob/master/cpp_utils/tests/BLE%20Tests/SampleWrite.cpp
   Ported to Arduino ESP32 by Evandro Copercini
   edited by ernst (ernst@teco.edu)

   ==NVS==
   ESP32 key value store with Preferences library.
   uses the Preferences library to store key value pairs in
   non-volatile storage on ESP32 processor.
   created for arduino-esp32 09 Jul 2018
   by Felix Ernst (ernst(at)teco.edu)

   namespace limited to 15 chars
   key name limited to 15 chars

   ==WATCHDOG==
   the BLE stack is not stable and stops advertising after a random time between some minutes and some hours
   the watchdog reboots the ESP if no device reads the sensor values (PM10 values)

   last edits:
   02.09.18 by Felix Ernst (ernst@teco.edu)
*/
#include "src/lib/ArduinoJson/ArduinoJson.h"
#include <BLE2902.h>
#include <sstream> //c++ libary to use std::string
#include <sdkconfig.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLEDescriptor.h>
#include <Preferences.h>
#include "Arduino.h"
#include "bleobjects.h"
#include "nvscallback.h"
#include "sensor.h"
#include "watchdog.h"
#include "datadescription.h"
#include "connectCallback.h"
#include<U8g2lib.h>

// this will assign the name PushButton to pin numer 21
const int PushButton = 21;

U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ 15, /* data=*/ 4, /* reset=*/ 16);


#define duster1_width 92
#define duster1_height 64
static const unsigned char duster1_bits[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x7C, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x38, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x78, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x87, 0xAA, 0x38, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0xA0, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0, 0x07, 0x00, 0x7C, 0x00, 0x00,
  0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xE0, 0x00, 0x00,
  0x00, 0x80, 0xC5, 0x05, 0x00, 0x00, 0x70, 0x00, 0x00, 0xC0, 0x07, 0x00,
  0x00, 0x80, 0x00, 0x0E, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0E, 0x00,
  0x00, 0x40, 0x11, 0x1D, 0x00, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x1C, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0x80, 0xEF, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0xF8, 0x1F, 0xD1, 0xC1, 0xD7, 0x03, 0x00, 0x00, 0x00, 0x70, 0x00,
  0x00, 0xAE, 0xFA, 0x02, 0xA2, 0xAB, 0x01, 0x00, 0xE0, 0x20, 0x60, 0x00,
  0x00, 0xFF, 0xFF, 0x5F, 0xFD, 0xD7, 0xC1, 0x01, 0xF0, 0x77, 0xE0, 0x00,
  0x00, 0xAB, 0xAA, 0x3A, 0xB8, 0xE2, 0x80, 0x00, 0xE0, 0x3F, 0xC0, 0x00,
  0xC0, 0x77, 0x77, 0xF7, 0x7D, 0x75, 0xC0, 0x01, 0xE0, 0x3F, 0xC0, 0x01,
  0xE0, 0xAA, 0xAA, 0xAA, 0xEE, 0x28, 0xE0, 0x03, 0xE0, 0x1F, 0x80, 0x01,
  0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0x35, 0xF0, 0x0F, 0xC0, 0x1F, 0x00, 0x03,
  0xE8, 0xAA, 0xAA, 0xAA, 0xAE, 0x38, 0xF8, 0x0A, 0xE0, 0x3F, 0x00, 0x03,
  0xFC, 0xDD, 0xDD, 0xDD, 0xFF, 0x1D, 0x78, 0x00, 0xF0, 0x3F, 0x00, 0x07,
  0xBE, 0xAA, 0xAA, 0xAA, 0xBA, 0x1A, 0x38, 0x00, 0xF8, 0x3E, 0x00, 0x02,
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x1D, 0x7C, 0x00, 0x70, 0x7C, 0x00, 0x06,
  0xBA, 0xAA, 0xAA, 0xAA, 0xBA, 0x0A, 0x38, 0x00, 0x00, 0x00, 0x00, 0x06,
  0x7F, 0x77, 0x77, 0x77, 0x77, 0x1D, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x06,
  0xBE, 0xAA, 0xAA, 0xAA, 0xBA, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x0E,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0D, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x04,
  0xBE, 0xAA, 0xAA, 0xAA, 0xAA, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x0C,
  0xFF, 0xDD, 0xDD, 0xDD, 0x5F, 0x0D, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x0C,
  0xBF, 0xAA, 0xAA, 0xAA, 0xBA, 0x0E, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x0E,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1D, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x04,
  0xBA, 0xAA, 0xAA, 0xAA, 0xBA, 0x0A, 0x3C, 0x00, 0xA0, 0x2F, 0x00, 0x06,
  0x7F, 0x77, 0x77, 0x77, 0x77, 0x1D, 0x7C, 0x00, 0xF0, 0x7F, 0x00, 0x06,
  0xBE, 0xAA, 0xAA, 0xAA, 0xBE, 0x08, 0x38, 0x00, 0x38, 0xE8, 0x00, 0x06,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1D, 0x7C, 0x00, 0x1C, 0xFF, 0x01, 0x07,
  0xAE, 0xAA, 0xAA, 0xAA, 0xAE, 0x18, 0xF8, 0x08, 0x0E, 0xFE, 0x03, 0x02,
  0xFC, 0xDD, 0xDD, 0xDD, 0xFD, 0x1D, 0xF8, 0x0F, 0x06, 0x7F, 0x03, 0x03,
  0xFC, 0xAA, 0xAA, 0xAA, 0xAA, 0x3A, 0xF0, 0x03, 0x06, 0x7F, 0x83, 0x03,
  0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x75, 0xF0, 0x01, 0x1E, 0xFF, 0xC1, 0x01,
  0xB8, 0xAA, 0xAA, 0xAA, 0xBB, 0x62, 0x80, 0x01, 0x38, 0xE8, 0x80, 0x01,
  0xF0, 0x77, 0x77, 0xF7, 0xF5, 0xF5, 0x80, 0x01, 0xF8, 0xFF, 0xC0, 0x01,
  0xE0, 0xAB, 0xAA, 0x3E, 0xE8, 0xEA, 0x80, 0x00, 0xE0, 0x3F, 0xE0, 0x00,
  0x00, 0xFF, 0xFF, 0x17, 0xC7, 0xD7, 0x01, 0x00, 0x00, 0x05, 0x70, 0x00,
  0x00, 0xAC, 0xBE, 0x80, 0x80, 0x8F, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00,
  0x00, 0xF0, 0x15, 0x71, 0x00, 0x7F, 0x07, 0x00, 0x00, 0x00, 0x1C, 0x00,
  0x00, 0x40, 0x00, 0x38, 0x00, 0x38, 0x0E, 0x00, 0x00, 0x00, 0x0E, 0x00,
  0x00, 0xC0, 0x55, 0x07, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x00,
  0x00, 0x80, 0xA2, 0x02, 0x00, 0x00, 0x38, 0x00, 0x00, 0x80, 0x03, 0x00,
  0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xF0, 0x01, 0x00, 0xF0, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0x00, 0xF8, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xD5, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xFF, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x5F, 0x00, 0x00, 0x00,
};

#define duster2_width 93
#define duster2_height 64
static const unsigned char duster2_bits[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x05, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x70, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0xE0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0xBE, 0xE0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x3E, 0x00, 0x00,
  0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x40, 0x1F, 0x00, 0xF4, 0x01, 0x00,
  0x00, 0x00, 0xFE, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00,
  0x00, 0x00, 0xD7, 0x1F, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x07, 0x00,
  0x00, 0x80, 0x01, 0x3E, 0x00, 0x68, 0x38, 0x00, 0x00, 0x00, 0x0E, 0x00,
  0x00, 0xC0, 0x01, 0xF0, 0x01, 0xFF, 0x1D, 0x00, 0x00, 0x00, 0x3C, 0x00,
  0x00, 0xE0, 0x0A, 0xE0, 0x83, 0x8F, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00,
  0x00, 0xF8, 0xFF, 0x81, 0xC7, 0x0F, 0x07, 0x00, 0x40, 0x00, 0x70, 0x00,
  0x00, 0x3C, 0xE8, 0x0B, 0xFE, 0x07, 0x03, 0x00, 0xC0, 0xE3, 0xE0, 0x00,
  0x00, 0x1E, 0x40, 0x7F, 0xFC, 0xC5, 0x63, 0x00, 0xC0, 0xF7, 0xC1, 0x01,
  0x00, 0x02, 0x00, 0xF8, 0xB3, 0x82, 0x61, 0x00, 0xC0, 0xFF, 0x80, 0x03,
  0xC0, 0x07, 0x00, 0xC0, 0xFF, 0xC2, 0xF1, 0x00, 0xC0, 0x7F, 0x00, 0x07,
  0xE0, 0x03, 0x00, 0x00, 0xBE, 0xE2, 0xF8, 0x00, 0x80, 0x3F, 0x00, 0x02,
  0xF0, 0x01, 0x00, 0x00, 0x5C, 0x71, 0xFC, 0x01, 0x80, 0x7F, 0x00, 0x07,
  0x98, 0x00, 0x00, 0x00, 0x48, 0x60, 0xE8, 0x03, 0x80, 0x7F, 0x00, 0x0E,
  0xDC, 0x01, 0x00, 0x00, 0x5C, 0x71, 0xC0, 0x07, 0xF0, 0x7F, 0x00, 0x0C,
  0xCC, 0x00, 0x00, 0x00, 0x28, 0x31, 0x80, 0x03, 0xE0, 0xF8, 0x00, 0x0C,
  0xCC, 0x00, 0x00, 0x00, 0x6C, 0x31, 0xC0, 0x07, 0x60, 0x70, 0x00, 0x1C,
  0xCE, 0x00, 0x00, 0x00, 0x2C, 0x31, 0x80, 0x07, 0x00, 0x00, 0x00, 0x08,
  0x46, 0x00, 0x00, 0x00, 0x64, 0x11, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1C,
  0xE6, 0x00, 0x00, 0x00, 0x2E, 0x18, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x08,
  0x66, 0x00, 0x00, 0x00, 0x24, 0x19, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1C,
  0x66, 0x00, 0x00, 0x00, 0x2E, 0x18, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x08,
  0x66, 0x00, 0x00, 0x00, 0x24, 0x19, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1C,
  0x66, 0x00, 0x00, 0x00, 0x2E, 0x18, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x08,
  0x66, 0x00, 0x00, 0x00, 0x6C, 0x19, 0x00, 0x07, 0x00, 0x04, 0x00, 0x1C,
  0x66, 0x00, 0x00, 0x00, 0x2C, 0x39, 0x80, 0x0F, 0x80, 0x3F, 0x00, 0x08,
  0x46, 0x00, 0x00, 0x00, 0x6C, 0x31, 0x80, 0x07, 0xF0, 0xFF, 0x01, 0x1C,
  0xEE, 0x00, 0x00, 0x00, 0x2C, 0x31, 0x80, 0x07, 0xB8, 0xA0, 0x03, 0x0C,
  0xCC, 0x00, 0x00, 0x00, 0x5C, 0x71, 0xC0, 0x07, 0x1C, 0x7C, 0x07, 0x0C,
  0xCC, 0x00, 0x00, 0x00, 0x48, 0x20, 0xE8, 0x03, 0x08, 0xFE, 0x06, 0x0E,
  0xDC, 0x01, 0x00, 0x00, 0x58, 0x71, 0xF8, 0x03, 0x1C, 0xFE, 0x07, 0x06,
  0x98, 0x00, 0x00, 0x00, 0xB8, 0x62, 0xF0, 0x03, 0x08, 0xFE, 0x06, 0x02,
  0xD8, 0x01, 0x00, 0x00, 0xFC, 0xC2, 0xF0, 0x01, 0x1C, 0x7C, 0x07, 0x07,
  0xB0, 0x03, 0x00, 0x80, 0xBF, 0x82, 0xE0, 0x00, 0x38, 0xA0, 0x03, 0x03,
  0xF0, 0x07, 0x00, 0xF0, 0xF7, 0xC5, 0x41, 0x00, 0xF0, 0xFF, 0xC1, 0x01,
  0xE0, 0x07, 0x00, 0xFE, 0xF8, 0x85, 0xE3, 0x00, 0x80, 0x3F, 0xC0, 0x00,
  0x00, 0x1F, 0xD0, 0x1F, 0xDF, 0x0F, 0x07, 0x00, 0x00, 0x14, 0xC0, 0x01,
  0x00, 0xF8, 0xFF, 0x82, 0x83, 0x8F, 0x0F, 0x00, 0x00, 0x00, 0xE0, 0x00,
  0x00, 0xF0, 0x5F, 0xF0, 0x01, 0xFF, 0x1D, 0x00, 0x00, 0x00, 0x70, 0x00,
  0x00, 0x80, 0x01, 0xF8, 0x00, 0xF8, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00,
  0x00, 0x80, 0x03, 0x7F, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x1E, 0x00,
  0x00, 0x00, 0xAB, 0x0B, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x80, 0x03, 0x00,
  0x00, 0x00, 0xFF, 0x01, 0x00, 0x00, 0xC0, 0x07, 0x00, 0xC0, 0x07, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x0E, 0x00, 0xF8, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xD5, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x01, 0x00, 0x00,
};

#define sad_width 127
#define sad_height 35
static const unsigned char sad_bits[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x1F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x03, 0x00, 0x00,
  0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
  0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x7F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFC, 0x7F, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x07,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x00, 0x00,
  0x00, 0xE0, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xFF, 0x01, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03, 0x00, 0x00, 0xF8, 0x3F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x07, 0x00,
  0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFC, 0x07, 0x00, 0x1E, 0xFC, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x1C, 0x3E, 0xFC, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x3E,
  0xFF, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xF0, 0x0F, 0x7F, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xDF, 0x7F, 0xFF, 0xFF, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x7F,
  0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xE0, 0xFF, 0x3F, 0xFC, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x1F, 0xF8, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x0F,
  0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xC0, 0xFF, 0x07, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x03, 0x80, 0xFF, 0x7F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,
  0x00, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xFF, 0x7F, 0x00, 0x00, 0xFC, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x1F, 0x00, 0x00, 0xF8, 0x7F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x0F, 0x00,
  0x00, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00,
};


#define happy_width 127
#define happy_height 39
static const unsigned char happy_bits[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xC0, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x01, 0x00, 0x00, 0xC0, 0xFF, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x03, 0x00,
  0x00, 0xE0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFF, 0x07, 0x00, 0x00, 0xF8, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x1F, 0x04, 0x00, 0xF8, 0x3F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x7F, 0x07,
  0x20, 0xFC, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xF0, 0xFF, 0x1F, 0xF8, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x3F, 0xFC, 0xFF, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x3F,
  0xFE, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xF8, 0xFF, 0x7F, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x1F, 0xFE, 0xFF, 0x7F, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x0F,
  0xFC, 0x9F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFE, 0x01, 0x00, 0xE0, 0x03, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0xF0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x7F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
  0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xFC, 0xFF,
  0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x3F, 0x00,
  0x00, 0xC0, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


void draw_duster(uint8_t bleOn) {

  if (bleOn) {
    u8g2.setFont(u8g2_font_5x7_tf);
    u8g2.setFontRefHeightExtendedText();
    u8g2.setFontPosTop();
    //u8g2.setFontDirection(1);
    //u8g2.drawStr(120, 8, "CONNECTED!");
    //u8g2.drawXBMP(10, 0, duster1_width, duster1_height, duster1_bits);
    u8g2.drawXBMP(0, 10, happy_width, happy_height, happy_bits);


  } else {

    u8g2.setFont(u8g2_font_5x7_tf);
    u8g2.setFontRefHeightExtendedText();
    u8g2.setFontPosTop();
    //u8g2.setFontDirection(1);
    // u8g2.drawStr(120, 0, "NOT CONNECTED!");
    //u8g2.drawXBMP(10, 0, duster2_width, duster2_height, duster2_bits);
    u8g2.drawXBMP(0, 10, sad_width, sad_height, sad_bits);
  }

}


/*
   Setup part
*/

void setup() {
  // This statement will declare pin 21 as digital input
  pinMode(PushButton, INPUT);

  // Display
  u8g2.begin();
  u8g2.firstPage();
  do {
    draw_duster(0);
  } while ( u8g2.nextPage() );

  // make serial monitor printing available
  Serial.begin(115200);

  /*
     BLE
  */

  // initialise with name of ble device
  BLEDevice::init(DEVICE_NAME);
  //initialise bleServer
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // initialise bleService
  pDustService = pServer->createService(DUST_SERVICE_UUID);
  pMetadataService = pServer->createService(METADATA_SERVICE_UUID);

  // initialise bleCharacteristic for config
  pMetadataCharacteristic = pMetadataService->createCharacteristic(
                              METADATA_CHARACTERISTIC_UUID,
                              // set the properties, only read possible too
                              BLECharacteristic::PROPERTY_READ |
                              BLECharacteristic::PROPERTY_WRITE
                            );
  // initialise bleButtonCharacteristic for sds011 sensor
  pButtonCharacteristic = pDustService->createCharacteristic(
                          BUTTINNOTIFY_CHARACTERISTIC_UUID,
                          // set the properties, only read possible too
                          BLECharacteristic::PROPERTY_READ |
                          BLECharacteristic::PROPERTY_NOTIFY
                        );

  // initialise bleCharacteristic for sds011 sensor
  pDataCharacteristic = pDustService->createCharacteristic(
                          DATA_CHARACTERISTIC_UUID,
                          // set the properties, only read possible too
                          BLECharacteristic::PROPERTY_READ
                        );

  // initialise bleCharacteristic for sds011 sensor
  pDataDescriptionCharacteristic = pDustService->createCharacteristic(
                                     DATADESCRIPTION_CHARACTERISTIC_UUID,
                                     // set the properties, only read possible too
                                     BLECharacteristic::PROPERTY_READ
                                   );

  // initialise bleCharacteristic for watchdog
  pNotifyCharacteristic = pDustService->createCharacteristic(
                            NOTIFY_CHARACTERISTIC_UUID,
                            // set the properties, only read possible too
                            BLECharacteristic::PROPERTY_READ |
                            BLECharacteristic::PROPERTY_NOTIFY |
                            BLECharacteristic::PROPERTY_INDICATE
                          );

  pNotifyDescriptor2902 = new BLE2902();
  pNotifyCharacteristic->addDescriptor(pNotifyDescriptor2902);



  // create JSON for descriptor which contains sensor meta data like units etc
  // default values, TODO: change that it checks if there is a value, if not use default value



  // create Json buffer. inside brackets: size of the pool in bytes.
  // Use arduinojson.org/assistant to compute the capacity.
  StaticJsonBuffer<1024> jsonBuffer_desc; //TODO set a good buffer size
  // create json root object
  JsonObject& description_json = jsonBuffer_desc.createObject();
  // create nested objects inside root object
  JsonObject& pm10_desc = description_json.createNestedObject("PM10");
  JsonObject& pm25_desc = description_json.createNestedObject("PM25");
  JsonObject& temp_desc = description_json.createNestedObject("TEMP");
  JsonObject& hum_desc = description_json.createNestedObject("HUM");
  JsonObject& atm_desc = description_json.createNestedObject("ATM");
  // add values to nested objects
  pm10_desc["UNIT"] = pm10_unit;
  pm25_desc["UNIT"] = pm25_unit;
  temp_desc["UNIT"] = temp_unit;
  hum_desc["UNIT"] = hum_unit;
  atm_desc["UNIT"] = atm_unit;
  pm10_desc["NAME"] = pm10_name;
  pm25_desc["NAME"] = pm25_name;
  temp_desc["NAME"] = temp_name;
  hum_desc["NAME"] = hum_name;
  atm_desc["NAME"] = atm_name;

  char description_json_char[512]; //TODO set maximum size of char here
  // create a char out of the json object
  description_json.printTo(description_json_char);

  pDataDescriptionCharacteristic->setValue(description_json_char);

  // Serial.println(description_json_char);

  // initialize characteristics
  pDataCharacteristic->setValue(String(-1).c_str());
  // notify characteristic notifies random values, just used to trigger reading in android app
  pNotifyCharacteristic->setValue("0");

  //callback to do something when a value is written or read
  //TODO ensure that key is not longer than 14
  const char* configkey = "config";
  nvsCallback *pMetadataCallback = new nvsCallback(configkey);
  pMetadataCharacteristic->setCallbacks(pMetadataCallback);
  watchdogCallback *pwatchdogCallback = new watchdogCallback();
  pDataCharacteristic->setCallbacks(pwatchdogCallback);

  pDustService->start();
  pMetadataService->start();

  // start advertising, so the device can be found
  pAdvertising = pServer->getAdvertising();
  pAdvertising->start();

  //SDS_SERIAL.begin(9600);
  sds.begin(&SDS_SERIAL, 12, 17);  // initialize SDS011 sensor


  /*
     watchdog setup
     hardware timer is set, if timer runs out, reboot is triggered
  */
  if (enable_wd == true) {
    timer = timerBegin(0, 80, true);                  //timer 0, div 80, initialise hardware timer
    timerAttachInterrupt(timer, &resetModule, true);  //attach callback
    timerAlarmWrite(timer, wdtTimeout * 1000, false); //set time in us
    timerAlarmEnable(timer);

  }
}



void loop() {


  if (!deviceConnected) {
    u8g2.firstPage();
    do {
      draw_duster(0);
    } while ( u8g2.nextPage() );
    Serial.println("Not Connectet");
    delay(100);
  } else {
    u8g2.firstPage();
    do {
      draw_duster(1);
    } while ( u8g2.nextPage() );
    //Serial.print("Connected");

    // digitalRead function stores the Push button state in variable push_button_state
    int Push_button_state = digitalRead(PushButton);
    //delay(10);
    if ( Push_button_state == HIGH ) {
      pButtonCharacteristic->setValue("down");
      Serial.print("Button");

      pNotifyCharacteristic->notify();

    } else {
      pButtonCharacteristic->setValue("up");

      int sdsError = sdsRead();
      if (!sdsError) {

        // default values, TODO: change that it checks if there is a value, if not use default value
        float temp = -1000;
        float hum = -1;
        float atm = -1;

        // create Json buffer. inside brackets: size of the pool in bytes.
        // Use arduinojson.org/assistant to compute the capacity.
        StaticJsonBuffer<1024> jsonBuffer; //TODO set a good buffer size
        // create json object
        JsonObject& data_values = jsonBuffer.createObject();
        // add all key-value pairs to json object
        data_values["PM10"] = pm10;
        data_values["PM25"] = pm25;
        data_values["TEMP"] = temp;
        data_values["HUM"] = hum;
        data_values["ATM"] = atm;

        char data_values_char[512]; //TODO set maximum size of char here
        // create a char out of the json object
        data_values.printTo(data_values_char);
        Serial.println(data_values_char);
        pDataCharacteristic->setValue(data_values_char);

        // notify characteristic changes value between "0" and "1", only to trigger reading in android app
        if (pNotifyCharacteristic->getValue() == "0") {
          pNotifyCharacteristic->setValue("1");
        }
        else {
          pNotifyCharacteristic->setValue("0");
        }
        pNotifyCharacteristic->notify();
      }
      //delay(10); // 100ms => f = 10/s
    }
  }

}
